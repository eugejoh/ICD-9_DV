low.g <- gsub("[^0-9]","",icd9.3[groupi+2]) #same as above
up.g <- c(gsub("[^0-9]","",icd9.3[groupi-1]),"999") #addition of max value (999) to upper bound
# replace "800" in second index with max value
# replace(gsub("[^0-9]","",icd9.3[groupi+2]),gsub("[^0-9]","",icd9.3[groupi+2])=="800","999")
diag.g <-data.frame(diag.g,low.g,up.g, stringsAsFactors = F)
names(diag.g) <- c("Name","Group","Start","End")
head(diag.g)
str(diag.g)
# SUBGROUP
icd9.3sg <- icd9.3[grep("\\([0-9]{3}-[0-9]{3}\\)",icd9.3)]
icd9.3sg <- gsub("\t"," ",icd9.3sg) #removes any lingering "\t"
icd9.3sg <- gsub("\\s\\(([0-9]{3}-[0-9]{3})\\)","__\\1",icd9.3sg) #replaces white space "\\s" and parantheses before front parantheses\\()
diag.sg <- as.data.frame(
stringr::str_split_fixed(icd9.3sg,"__",2),
stringsAsFactors = F)
diag.sg <- as.data.frame(
cbind(
diag.sg,
stringr::str_split_fixed(diag.sg[,2],"-",2),
stringsAsFactors = F))
names(diag.sg) <- c("Name","Range","Start","End")
head(diag.sg,4)
str(diag.sg)
# CLASSIFICATION
icd9.3c <- icd9.3[grep("(^[0-9]{3}\t)|(^V[0-9]{2}\t)|(^[0-9]{3}\\s)",icd9.3)]
icd9.3c <- gsub("\t","__",icd9.3c)
icd9.3c <- gsub("^(V[0-9]{2})\\s","\\1__",icd9.3c)
icd9.3c <- gsub("^([0-9]{3})\\s","\\1__",icd9.3c)
diag.c <- as.data.frame(stringr::str_split_fixed(icd9.3c,"__",2),stringsAsFactors = F)
names(diag.c) <- c("Code","Name")
diag.c <- diag.c[c("Name","Code")]
head(diag.c)
diag.c[1:50,2]
# NEED TO CONSIDER EXTRA CODES IN THE NHAMCS
Code <- c("V990-", #names need to match in data.frame() and rbind() steps
"V991-",
"V992-",
"V993-",
"V997-",
"0000")
Name <- c("Noncodable diagnosis, insufficient information for coding, illegible diagnosis",
"Left before being seen, patient walked out, not seen by doctor, left against medical advice",
"Transferred to another facility, sent to see specialist",
"HMO will not authorize treatment",
"Entry of 'none,' 'no diagnosis,' 'no disease,' 'healthy'",
"Blank")
#df1 <- data.frame(Code,Name)
diag.c <- rbind(diag.c,data.frame(Code,Name))
myvars <- c("VMONTH", "VYEAR", "AGE","SEX","AGER","RESIDNCE","RACE","ETHNIC","DIAG1","DIAG2","DIAG3","REGION","PATWT","CPSUM","CSTRATM") #15 variables
ed05 <- ed05[,myvars] #smaller dataset with columns of interest to reduce processing time
# After subset, we apply the survey design weights
library(survey)
wt<-svydesign(data=ed05, # dataset from ed.list by appropriate year
weights=~PATWT, #weights=PATWT #check by edw; names(ed.list[[1]])[140]
ids=~CPSUM, #ids=CPSUM #check by names(ed.list[[1]])[278]
strata=~CSTRATM, #strata=CSTRATM #check by names(ed.list[[1]])[277]
nest=T) #forces nesting in the design
# Extract Estimates of # Visits for each diagnosis
sum(svytable(~DIAG1,wt)) #estimated 115,322,815 visits to ED in 2005
sum(svytable(~DIAG2,wt))
sum(svytable(~DIAG3,wt))
newtab <- svytable(~DIAG1,wt) #0000 are blank ()
ed05.df <- as.data.frame(newtab, stringsAsFactors = F)
names(ed05.df)
head(ed05.df)
# ADDING 3 digit code/classification to ed05.df (based on diag.c)
ed05.df$Code <- "-"
for (k in paste0("^",diag.c[,2])){ #codes
gindex <- grep(k,ed05.df[,1]) #matches code with DIAG1 column
ed05.df$Code[gindex] <- diag.c$Code[grep(k,diag.c[,2])]
ed05.df$Code.n <- as.numeric(ed05.df$Code) #some values are coered to NA
ed05.df$Code.n[which(is.na(ed05.df$Code.n))] <- 1000 #treat all NA's wih value 1000
}
library(plyr)
head(join(ed05.df,diag.c,by="Code")) #join ed05.df with names from diag.c from plyr package
diag.g$Start.n <- as.numeric(diag.g$Start) #format for data.table
diag.g$End.n <- as.numeric(diag.g$End)
head(diag.g)
# Subgroups
diag.sg$Start.n <- as.numeric(diag.sg$Start) #format for data.table
diag.sg$End.n <- as.numeric(diag.sg$End)
head(diag.sg)
library(data.table)
dt.g <- data.table(diag.g) #rename these
setkey(dt.g,Start.n,End.n)
dt.ed05 <- data.table(ed05.df)
dt.ed05[, Code.n2 := Code.n] #create a range of zero for overlap
setkey(dt.ed05)
foverlaps(dt.ed05, dt.g, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "any", mult="all", nomatch = 0L)
require(data.table)
## simple example:
x = data.table(start=c(1,10,15,35), end=c(9,14,30,40)) #ranges
y = data.table(start=c(11, 20, 32), end=c(11, 20, 32), val1 = letters[8:10]) #actual values
x
y
setkey(y, start, end)
foverlaps(x, y, type="any", which=TRUE) ## return overlap indices
foverlaps(x, y, type="any") ## return overlap join
foverlaps(dt.ed05, dt.g, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "any", mult="all", nomatch = 0L, which = T)
foverlaps(dt.ed05, dt.g, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "any", mult="all", nomatch = 0L, which = F)
foverlaps(x, y, type="any", which=TRUE) ## return overlap indices
foverlaps(x, y, type="any") ## return overlap join
foverlaps(x, y, type="any", mult="first") ## returns only first match
foverlaps(x, y, type="within") ## matches iff 'x' is within 'y'
foverlaps(dt.ed05, dt.g, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "any", mult="all", nomatch = 0L)
foverlaps(dt.ed05, dt.g, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "any", mult="all", nomatch = 0L)
head(diag.g)
icd9.3[grep("V[0-9]{2}\\)$",icd9.3)] #extracts all subtitles for V classifications
icd9.3[grep("V[0-9]{2}\\)$",icd9.3)] #extracts all subtitles for V classifications
icd9.3gv <- icd9.3[grep("SUPPLEMENTARY CLASSIFICATION OF FACTORS INFLUENCING",icd9.3)]
icd9.3gv
foverlaps(dt.ed05, dt.g, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "any", mult="all", nomatch = 0L)
dt.ed05
foverlaps(dt.ed05, dt.g, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all", nomatch = 0L)
foverlaps(dt.ed05, dt.g, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all", nomatch = "-")
dt.ed05
tail(dt.ed05)
tail(dt.ed05,50)
foverlaps(dt.ed05, dt.g, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all")
foverlaps(dt.ed05, dt.g, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "any", mult="all")
dt.g <- data.table(diag.g) #rename these
# dt.g <- dt.g[,c(1,2,5,6)]
# d1 <- dt.g[,c(2,3,4)]
# names(d1) <- c("val1","start","end")
setkey(dt.g,Start.n,End.n)
dt.ed05 <- data.table(ed05.df)
dt.ed05[, Code.n2 := Code.n] #create a range of zero for overlap
#names(d2) <- c("valdiag","valfreq","Code","start","end")
# setkey(d2)
setkey(dt.ed05)
foverlaps(dt.ed05, dt.g, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "any", mult="all")
foverlaps(dt.ed05, dt.g, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all")
foverlaps(dt.ed05, dt.g, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all", nomatch = 0L)
foverlaps(dt.ed05, dt.g, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "any", mult="all", nomatch = 0L) #removes
foverlaps(dt.ed05, dt.g, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all", nomatch = "-")
foverlaps(dt.ed05, dt.g, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all")
tail(dt.ed05,50)
foverlaps(dt.ed05, dt.g, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all", nomatch = 0L) #removes V and Blanks
foverlaps(dt.ed05, dt.g, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all") #inputs NA for non-matches (ie. 0000 and V--- codes)
dim(dt.ed05)
dim(ed05.df)
dt.sg <- data.table(diag.sg)
dt.sg
ed05.df
dt.ed05
foverlaps(dt.ed05, dt.sg, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all", nomatch = 0L) #removes V and Blanks, only1931 rows
tail(dt.ed05,50)
dt.sg <- data.table(diag.sg)
setkey(dt.sg,Start.n,End.n)
dt.ed05
setkey(dt.ed05)
foverlaps(dt.ed05, dt.sg, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all", nomatch = 0L) #removes V and Blanks, only1931 rows
# Apply foverlaps to original dt.ed05
dt.ed05 <- foverlaps(dt.ed05, dt.g, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all", nomatch = 0L) #removes V and Blanks, only1931 rows
dt.sg <- data.table(diag.sg)
setkey(dt.sg,Start.n,End.n)
dt.ed05
dt.ed05
setkey(dt.ed05,Code.n,Code.n2)
foverlaps(dt.ed05, dt.sg, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all", nomatch = 0L) #removes V and Blanks, only1931 rows
tail(dt.ed05,50)
dt.ed05 <- foverlaps(dt.ed05, dt.sg, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all", nomatch = 0L) #removes V and Blanks, only1931 rows
tail(dt.ed05,50)
head(dt.ed05,50)
head(dt.ed05,50)
names(dt.ed05)
grep("^i\\.",names(dt.ed05))
grep("^i\\.",names(dt.ed05),value=T)
grep("^i\\.|n",names(dt.ed05),value=T)
grep("^i\\.|\\.n",names(dt.ed05),value=T)
colnames(dt.ed05)
names(dt.ed05)
dt.ed05[,which(grep("^i\\.|\\.n",names(dt.ed05))):=NULL]
dt.ed05[,which(grepl("^i\\.|\\.n",names(dt.ed05))):=NULL]
dt.ed05
dt.ed05 <- data.table(ed05.df)
dt.g <- data.table(diag.g) #rename these
setkey(dt.g,Start.n,End.n)
dt.ed05 <- data.table(ed05.df)
dt.ed05[, Code.n2 := Code.n] #create a range of zero for overlap
setkey(dt.ed05)
foverlaps(dt.ed05, dt.g, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all") #inputs NA for non-matches (ie. 0000 and V--- codes), retains 2062 rows
foverlaps(dt.ed05, dt.g, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all", nomatch = 0L) #removes V and Blanks, only1931 rows
tail(dt.ed05,50)
# Apply foverlaps to original dt.ed05
dt.ed05 <- foverlaps(dt.ed05, dt.g, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all", nomatch = 0L) #removes V and Blanks, only1931 rows
# foverlaps for Subgroups
dt.sg <- data.table(diag.sg)
setkey(dt.sg,Start.n,End.n)
dt.ed05
setkey(dt.ed05,Code.n,Code.n2)
foverlaps(dt.ed05, dt.sg, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all", nomatch = 0L) #removes V and Blanks, only1931 rows
tail(dt.ed05,50)
dt.ed05 <- foverlaps(dt.ed05, dt.sg, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all", nomatch = 0L) #removes V and Blanks, only1931 rows
tail(dt.ed05,50)
head(dt.ed05,50)
3 !=2
3 !=3
?grepl
!=FALSE
!FALSE
grep("Name",names(dt.ed05))
grep("Name",names(dt.ed05),value=T)
grep("Name|Group|DIAG1|Freq|Code",names(dt.ed05),value=T)
grep("Name|Group|DIAG1|Freq|Code+",names(dt.ed05),value=T)
grep("Name|Group|DIAG1|Freq|Code*",names(dt.ed05),value=T)
grep("Name|Group|DIAG1|Freq|Code?",names(dt.ed05),value=T)
grep("Name|Group|DIAG1|Freq|Code.",names(dt.ed05),value=T)
grep("Name|Group|DIAG1|Freq|Code",names(dt.ed05),value=T)
grep("Name|Group|DIAG1|Freq|Code.*?",names(dt.ed05),value=T)
grep("Name|Group|DIAG1|Freq|Code.?",names(dt.ed05),value=T)
grep("Name|Group|DIAG1|Freq|Code.+",names(dt.ed05),value=T)
grep("Name|Group|DIAG1|Freq|Code.*?",names(dt.ed05),value=T)
grep("Name|Group|DIAG1|Freq|Code.*?[^\\.n]",names(dt.ed05),value=T)
grep("Name|Group|DIAG1|Freq|Code[^\\.n]",names(dt.ed05),value=T)
grep("Name|Group|DIAG1|Freq|Code[^n]",names(dt.ed05),value=T)
grep("Name|Group|DIAG1|Freq|Code[n]",names(dt.ed05),value=T)
grep("Name|Group|DIAG1|Freq|Code?",names(dt.ed05),value=T)
grep("Name|Group|DIAG1|Freq|[^\\.n]",names(dt.ed05),value=T)
grep("Name|Group|DIAG1|Freq|[\\.n]",names(dt.ed05),value=T)
grep("Name|Group|DIAG1|Freq|[^\\.n]",names(dt.ed05),value=T)
grep("Name|Group|DIAG1|Freq|[^\.n]",names(dt.ed05),value=T)
grep("Name|Group|DIAG1|Freq|[^.n]",names(dt.ed05),value=T)
grep("Name|Group|DIAG1|Freq|[^n]",names(dt.ed05),value=T)
grep("Name|Group|DIAG1|Freq|[^\\.n]$",names(dt.ed05),value=T)
grep("Name|Group|DIAG1|Freq",names(dt.ed05),value=T)
grep("Name|Group|DIAG1|Freq|Code",names(dt.ed05),value=T)
grep("Name|Group|DIAG1|Freq|Code?.",names(dt.ed05),value=T)
grep("Name|Group|DIAG1|Freq|Code?*",names(dt.ed05),value=T)
grep("Name|Group|DIAG1|Freq|Code?.",names(dt.ed05),value=T)
grep("Name|Group|DIAG1|Freq|Code?+",names(dt.ed05),value=T)
grep("Name|Group|DIAG1|Freq|Code.?",names(dt.ed05),value=T)
grep("Code.?",names(dt.ed05),value=T)
grep("Code",names(dt.ed05),value=T)
grep("Code.*?",names(dt.ed05),value=T)
grep("Code.*?\\.",names(dt.ed05),value=T)
grep("Code\\..*?",names(dt.ed05),value=T)
grep("Code.*?",names(dt.ed05),value=T)
grep("\\.Code.*?",names(dt.ed05),value=T)
grep("Code.\\.*?",names(dt.ed05),value=T)
grep("^Code$",names(dt.ed05),value=T)
grep("Name|Group|DIAG1|Freq|^Code$",names(dt.ed05),value=T)
grep("Name|Group|DIAG1|Freq|^Code$",names(dt.ed05),value=T)
grep("^i\\.|\\.n",names(dt.ed05),value=T)
dt.ed05
names(dt.ed05)
dt.ed05[,which(!grepl("Name|Group|DIAG1|Freq|^Code$",names(dt.ed05))):=NULL]
names(dt.ed05)
grep("Name|Group|DIAG1|Freq|^Code$",names(dt.ed05),value=T)
names(dt.ed05)
dt.ed05
?setnames
names(dt.ed05)
setnames(dt.ed05,"Name","Subgroup")
setnames(dt.ed05,"i.Name","Group")
setnames(dt.ed05,"Code","Classification")
names(dt.ed05)
setnames(dt.ed05,"Classification","Code")
names(dt.ed05)
# foverlaps for Groups
dt.g <- data.table(diag.g) #rename these
setkey(dt.g,Start.n,End.n)
dt.ed05 <- data.table(ed05.df)
dt.ed05[, Code.n2 := Code.n] #create a range of zero for overlap
setkey(dt.ed05)
# foverlaps(dt.ed05, dt.g, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all") #inputs NA for non-matches (ie. 0000 and V--- codes), retains 2062 rows
# foverlaps(dt.ed05, dt.g, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all", nomatch = 0L) #removes V and Blanks, only 1931 rows
# tail(dt.ed05,50)
# Apply foverlaps to original dt.ed05
dt.ed05 <- foverlaps(dt.ed05, dt.g, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all", nomatch = 0L) #removes V and Blanks, only1931 rows
# ----------------------------------------------------------------------------------
# foverlaps for Subgroups
dt.sg <- data.table(diag.sg)
setkey(dt.sg,Start.n,End.n)
dt.ed05
setkey(dt.ed05,Code.n,Code.n2)
foverlaps(dt.ed05, dt.sg, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all", nomatch = 0L) #removes V and Blanks, only1931 rows
tail(dt.ed05,50)
dt.ed05 <- foverlaps(dt.ed05, dt.sg, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all", nomatch = 0L) #removes V and Blanks, only1931 rows
tail(dt.ed05,50)
head(dt.ed05,50)
# we want to keep Name (Subgroup), i.Name (Group), Group, DIAG1, Freq, Code
grep("Name|Group|DIAG1|Freq|^Code$",names(dt.ed05),value=T)
grep("^i\\.|\\.n",names(dt.ed05),value=T)
names(dt.ed05)
dt.ed05[,which(!grepl("Name|Group|DIAG1|Freq|^Code$",names(dt.ed05))):=NULL]
names(dt.ed05)
setnames(dt.ed05,"Name","Subgroup")
setnames(dt.ed05,"Group","Group.n")
setnames(dt.ed05,"i.Name","Group")
setnames(dt.ed05,"Classification","Code")
head(dt.ed05)
dt.g <- data.table(diag.g) #rename these
setkey(dt.g,Start.n,End.n)
dt.ed05 <- data.table(ed05.df)
dt.ed05[, Code.n2 := Code.n] #create a range of zero for overlap
setkey(dt.ed05)
# foverlaps(dt.ed05, dt.g, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all") #inputs NA for non-matches (ie. 0000 and V--- codes), retains 2062 rows
# foverlaps(dt.ed05, dt.g, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all", nomatch = 0L) #removes V and Blanks, only 1931 rows
# tail(dt.ed05,50)
# Apply foverlaps to original dt.ed05
dt.ed05 <- foverlaps(dt.ed05, dt.g, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all", nomatch = 0L) #removes V and Blanks, only1931 rows
# ----------------------------------------------------------------------------------
# foverlaps for Subgroups
dt.sg <- data.table(diag.sg)
setkey(dt.sg,Start.n,End.n)
dt.ed05
setkey(dt.ed05,Code.n,Code.n2)
foverlaps(dt.ed05, dt.sg, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all", nomatch = 0L) #removes V and Blanks, only1931 rows
tail(dt.ed05,50)
dt.ed05 <- foverlaps(dt.ed05, dt.sg, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all", nomatch = 0L) #removes V and Blanks, only1931 rows
tail(dt.ed05,50)
head(dt.ed05,50)
# we want to keep Name (Subgroup), i.Name (Group), Group, DIAG1, Freq, Code
grep("Name|Group|DIAG1|Freq|^Code$",names(dt.ed05),value=T)
grep("^i\\.|\\.n",names(dt.ed05),value=T)
names(dt.ed05)
dt.ed05[,which(!grepl("Name|Group|DIAG1|Freq|^Code$",names(dt.ed05))):=NULL]
dt.e05
dt.ed05
dt.sg <- data.table(diag.sg)
setkey(dt.sg,Start.n,End.n)
dt.ed05
setkey(dt.ed05,Code.n,Code.n2)
foverlaps(dt.ed05, dt.sg, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all", nomatch = 0L) #removes V and Blanks, only1931 rows
tail(dt.ed05,50)
dt.ed05 <- foverlaps(dt.ed05, dt.sg, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all", nomatch = 0L) #removes V and Blanks, only1931 rows
tail(dt.ed05,50)
head(dt.ed05,50)
# we want to keep Name (Subgroup), i.Name (Group), Group, DIAG1, Freq, Code
grep("Name|Group|DIAG1|Freq|^Code$",names(dt.ed05),value=T)
grep("^i\\.|\\.n",names(dt.ed05),value=T)
names(dt.ed05)
dt.g <- data.table(diag.g) #rename these
setkey(dt.g,Start.n,End.n)
dt.ed05 <- data.table(ed05.df)
dt.ed05[, Code.n2 := Code.n] #create a range of zero for overlap
setkey(dt.ed05)
# foverlaps(dt.ed05, dt.g, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all") #inputs NA for non-matches (ie. 0000 and V--- codes), retains 2062 rows
# foverlaps(dt.ed05, dt.g, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all", nomatch = 0L) #removes V and Blanks, only 1931 rows
# tail(dt.ed05,50)
# Apply foverlaps to original dt.ed05
dt.ed05 <- foverlaps(dt.ed05, dt.g, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all", nomatch = 0L) #removes V and Blanks, only1931 rows
# ----------------------------------------------------------------------------------
# foverlaps for Subgroups
dt.sg <- data.table(diag.sg)
setkey(dt.sg,Start.n,End.n)
dt.ed05
setkey(dt.ed05,Code.n,Code.n2)
foverlaps(dt.ed05, dt.sg, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all", nomatch = 0L) #removes V and Blanks, only1931 rows
tail(dt.ed05,50)
dt.ed05 <- foverlaps(dt.ed05, dt.sg, by.y = c("Start.n","End.n"), by.x = c("Code.n","Code.n2"), type = "within", mult="all", nomatch = 0L) #removes V and Blanks, only1931 rows
tail(dt.ed05,50)
head(dt.ed05,50)
# we want to keep Name (Subgroup), i.Name (Group), Group, DIAG1, Freq, Code
grep("Name|Group|DIAG1|Freq|^Code$",names(dt.ed05),value=T)
grep("^i\\.|\\.n",names(dt.ed05),value=T)
names(dt.ed05)
dt.ed05
names(dt.ed05)
dt.ed05[,which(!grepl("Name|Range|Group|DIAG1|Freq|^Code$",names(dt.ed05))):=NULL]
names(dt.ed05)
names(dt.ed05)
setnames(dt.ed05,"Name","Subgroup")
setnames(dt.ed05,"Group","Group.n")
setnames(dt.ed05,"i.Name","Group")
setnames(dt.ed05,"Classification","Code")
head(dt.ed05)
setcolorder(dt.ed05,c("Group","Group.n","Subgroup","Range","Code","DIAG1","Freq"))
head(dt.ed05)
str(dt.ed05)
str(dt.ed05)
library(data.tree)
library(treemap)
data(GNI2014)
head(GNI2014)
GNI2014$pathString <- paste("world",
GNI2014$continent,
GNI2014$country,
sep = "/")
head(GNI2014)
getAnywhere("as.data.frame.data.table")
df.ed05 <- as.data.frame(dt.ed05)
df.ed05
head(df.ed05)
str(df.ed05)
df.ed05 <- as.data.frame(dt.ed05)
dt.ed05
head(df.ed05)
head(dt.ed05)
head(df.ed05)
str(df.ed05)
df.ed05$pathString <- paste("2005",
df.ed05$Group.n,
df.ed05$Range,
df.ed05$Code,
sep = "/")
head(df.ed05)
head(GNI2014)
population <- as.Node(GNI2014)
population
ICD9 <- as.Node(df.ed05)
ICD9
population <- as.Node(GNI2014)
population
print(ICD9,"Freq")
plot(ICD9)
ICD9
install.packages("networkD3")
library(networkD3)
ICD9net <- ToDataFrameNetwork(ICD9,"Freq")
simpleNetwork(ICD9net)
radialNetwork(ICD9net)
ICD9netlist <- ToListExplicit(ICD9, unname = TRUE)
radialNetwork(ICD9netlist)
?as.Node
head(df.ed05)
df.ed05$pathString1 <- paste("2005",
df.ed05$Group,
df.ed05$Subgroup,
df.ed05$DIAG1,
sep = "/")
head(df.ed05)
ICD9.name <- as.Node(df.ed05,pathName="pathString1")
ICD9.name
print(ICD9.name,"Freq")
ICD9.name <- as.Node(df.ed05,pathName="pathString1")
ICD9.name
ICD9net.name <- ToDataFrameNetwork(ICD9.name,"Freq")
simpleNetwork(ICD9net.name)
ICD9netlist.name <- ToListExplicit(ICD9.name, unname = TRUE)
radialNetwork(ICD9netlist.name)
?treemap
treemap(df.ed05,
index=c("Group","Subgroup"),
vSize="Freq",
type="value")
treemap(df.ed05,
index=c("Group","Subgroup"),
vColor="Code"
vSize="Freq",
type="value")
treemap(df.ed05,
index=c("Group","Subgroup"),
vColor="Code",
vSize="Freq",
type="value")
treemap(df.ed05,
index=c("Group","Subgroup"),
vColor="Freq",
type="value")
head(df.ed05)
treemap(df.ed05,
index=c("Subgroup","Code"),
vSize="Freq",
type="value")
str(ICD9)
library("ggtree")
nwk <- system.file("extdata", "sample.nwk", package="treeio")
tree <- read.tree(nwk)
tree
tree$edge
tree$Nnode
summary(tree)
class(tree)
class(ICD9)
as.phylo.Node()
?as.phylo.Node
ggplot(tree, aes(x, y)) +
geom_tree() +
theme_tree()
library("ggtree")
nwk <- system.file("extdata", "sample.nwk", package="treeio")
tree <- read.tree(nwk)
class(tree)
ggplot(tree, aes(x, y)) +
geom_tree() +
theme_tree()
as.data.frame(tree)
plot(tree,type="fan")
plot(ICD9)
plot(ICD9,type="fan")
plot(ICD9.code,type="fan")
library(data.tree)
library(treemap)
df.ed05$pathString <- paste("2005",
df.ed05$Group.n,
df.ed05$Range,
df.ed05$Code,
sep = "/")
df.ed05$pathString1 <- paste("2005",
df.ed05$Group,
df.ed05$Subgroup,
df.ed05$DIAG1,
sep = "/")
head(df.ed05)
ICD9.code <- as.Node(df.ed05,pathName="pathString")
ICD9.code
plot(ICD9.code,type="fan")
plot(ICD9net.code,type="fan")
ICD9net.code <- ToDataFrameNetwork(ICD9.code,"Freq")
simpleNetwork(ICD9net.code)
ICD9netlist.code <- ToListExplicit(ICD9.code, unname = TRUE)
radialNetwork(ICD9netlist.code)
# Names
ICD9.name <- as.Node(df.ed05,pathName="pathString1")
ICD9net.name <- ToDataFrameNetwork(ICD9.name,"Freq")
ICD9netlist.name <- ToListExplicit(ICD9.name, unname = TRUE)
plot(ICD9net.code,type="fan")
plot(ICD9net.name,type="fan")
plot(ICD9name,type="fan")
plot(ICD9.name,type="fan")
